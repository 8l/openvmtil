/* core/compiler/machineCode.c */
int32 _CalculateModRmByte(int32 mod, int32 reg, int32 rm, int32 disp, int32 sib);
void _Compile_Displacement(int32 modRm, int32 disp);
int32 _CalculateSib(int32 scale, int32 indexReg, int32 baseReg);
void _Compile_ModRmSibDisplacement(int32 modRm, int32 modRmFlag, int32 sib, int disp);
void _Compile_ImmediateData(int32 imm, int32 immSize);
void _Compile_InstructionX86(int opCode, int mod, int reg, int rm, int modFlag, int sib, int32 disp, int32 imm, int immSize);
void _Compile_LEA(int32 reg, int32 rm, int32 sib, int32 disp);
void _Compile_Group1(int32 code, int32 toRegOrMem, int32 mod, int32 reg, int32 rm, int32 sib, int32 disp, int32 osize);
void _Compile_Group1_Immediate(int32 code, int32 mod, int32 rm, int32 disp, int32 imm, int32 iSize);
void _Compile_Op_Special_Reg_To_Reg(int32 code, int32 reg, int32 rm);
void _Compile_Group2(int mod, int regOpCode, int rm, int sib, int32 disp, int32 imm);
void _Compile_Group2_CL(int mod, int regOpCode, int rm, int sib, int32 disp);
void _Compile_Group3(int32 code, int32 mod, int32 rm, int32 sib, int32 disp, int32 imm, int32 size);
void _Compile_IMULI(int32 mod, int32 reg, int32 rm, int32 sib, int32 disp, int32 imm, int32 size);
void _Compile_IMUL(int32 mod, int32 reg, int32 rm, int32 sib, int32 disp);
void _Compile_Test(int32 mod, int32 reg, int32 rm, int32 disp, int32 imm);
void _Compile_Group5(int32 code, int32 mod, int32 rm, int32 sib, int32 disp, int32 size);
void _Compile_IncDecPushPopReg(int32 op, int32 reg);
void _Compile_Move_Reg_To_Reg(int32 dstReg, int32 srcReg);
void _Compile_MoveImm(int32 direction, int32 rm, int32 sib, int32 disp, int32 imm, int32 operandSize);
void _Compile_MoveImm_To_Reg(int32 reg, int32 imm, int32 iSize);
void _Compile_Move(int32 direction, int32 reg, int32 rm, int32 sib, int32 disp);
void _Compile_Move_Reg_To_Rm(int32 dstRmReg, int32 disp, int32 srcReg);
void _Compile_Move_AddressValue_To_EAX(int32 address);
void _Compile_Move_EAX_To_MemoryAddress(int32 address);
void _Compile_Move_Rm_To_Reg(int32 dstReg, int32 srcRmReg, int32 disp);
byte *_OptimizeJumps(byte *addr);
int32 _CalculateOffsetForCallOrJump(byte *compileAtAddress, byte *jmpToAddr, int32 optimizeFlag);
void _SetOffsetForCallOrJump(byte *compileAtAddress, byte *jmpToAddr, int32 optimizeFlag);
void _Compile_JumpToAddress(byte *jmpToAddr);
void _Compile_JumpToReg(int32 reg);
void _Compile_UninitializedJumpEqualZero(void);
void _Compile_JumpWithOffset(int32 disp);
void _Compile_UninitializedCall(void);
void _Compile_UninitializedJump(void);
void _Compile_JCC(int32 negFlag, int32 ttt, byte *jmpToAddr);
void _Compile_Call(byte *callAddr);
void _Compile_Call_NoOptimize(byte *callAddr);
void _Compile_Return(void);
void _Compile_PushReg(int32 reg);
void _Compile_PopToReg(int32 reg);
void _Compile_PopAD(void);
void _Compile_PushAD(void);
void _Compile_PopFD(void);
void _Compile_PushFD(void);
void _Compile_Sahf(void);
void _Compile_Lahf(void);
void _Compile_IRET(void);
void _Compile_INT3(void);
void _Compile_INT80(void);
void _Compile_Noop(void);
void _Compile_MOVZX_REG(int32 reg);
void Compile_X_Group5(Compiler *compiler, int32 op, int32 rlFlag);
void Compile_X_Group1(Compiler *compiler, int32 op, int32 ttt, int32 n);
void _Compiler_Setup_BI_tttn(Compiler *compiler, int32 ttt, int32 negFlag);
void _Compile_SET_tttn_REG(int32 ttt, int32 negFlag, int32 reg);
void Compile_GetLogicFromTOS(BlockInfo *bi);
int32 Compile_ReConfigureLogicInBlock(BlockInfo *bi, int32 overwriteFlag);
void _Compile_Jcc(int32 bindex, int32 overwriteFlag, int32 n, int32 ttt);
/* core/compiler/compile.c */
void _Compile_CallEAX(void);
void Compile_DataStack_PopAndCall(void);
void _Compile_Rsp_To(void);
void _Compile_Rsp_Drop(void);
void _Compile_Rsp_Get(void);
void _Compile_Rsp_Fetch(void);
void _Compile_Rsp_From(void);
void _Compile_Rsp_Store(void);
Word *_CfrTil_VariableGet(Namespace *ns, byte *name);
void _CfrTil_VariableValueSet(Namespace *ns, byte *name, int32 value);
int32 _CfrTil_VariableValueGet(byte *namespace, byte *name);
void _Compile_C_Var_To_Reg(int32 reg, int32 *ptrToCVar);
void _Compile_Reg_To_C_Var(int32 reg, int32 *ptrToCVar);
void _Compile_Move_Literal_Immediate_To_Reg(int32 reg, int32 value);
void _Compile_LValue_ClassFieldToReg(Word *word, int32 reg);
void _Compile_RValue_ClassFieldToReg(Word *word, int32 reg);
/* core/compiler/memory.c */
void Compile_Peek(Compiler *compiler, int32 stackReg);
void Compile_Store(Compiler *compiler, int32 stackReg);
void Compile_Poke(Compiler *compiler, int32 stackReg);
void Compile_AtEqual(int32 stackReg);
/* core/compiler/combinators.c */
void CfrTil_EndCombinator(int32 quotesUsed, int32 moveFlag);
void CfrTil_BeginCombinator(int32 quotesUsed);
void CfrTil_DropBlock(void);
void _CfrTil_BlockRun(Boolean flag);
void CfrTil_BlockRun(void);
void CfrTil_LoopCombinator(void);
void CfrTil_NLoopCombinator(void);
void CfrTil_If1Combinator(void);
int32 CfrTil_WhileCombinator(void);
int32 CfrTil_DoWhileCombinator(void);
void CfrTil_If2Combinator(void);
void CfrTil_TrueFalseCombinator2(void);
void CfrTil_TrueFalseCombinator3(void);
void CfrTil_IfElseCombinator(void);
void CfrTil_DoWhileDoCombinator(void);
void CfrTil_ForCombinator(void);
/* core/compiler/math.c */
void Compile_Minus(Compiler *compiler);
void Compile_Plus(Compiler *compiler);
void Compile_IMultiply(Compiler *compiler);
void _Compile_Divide(Compiler *compiler, int32 type);
void Compile_Divide(Compiler *compiler);
void Compile_Mod(Compiler *compiler);
void Compile_Group1_X_OpEqual(Compiler *compiler, int32 op);
void Compile_MultiplyEqual(Compiler *compiler);
void Compile_DivideEqual(Compiler *compiler);
/* core/compiler/cpu.c */
void _CpuState_Show(CpuState *cpu);
void _Compile_CpuState_Save(CpuState *cpu);
void _Compile_CpuState_Restore(CpuState *cpu);
void _Compile_ESP_Restore(void);
void _Compile_ESP_Save(void);
void _ESP_Setup(void);
CpuState *_CpuState_Copy(CpuState *dst, CpuState *src);
CpuState *CpuState_Copy(CpuState *cpu0, int32 type);
CpuState *CpuState_New(int32 type);
/* core/compiler/stack.c */
void _Compile_Stack_Drop(int32 stackReg);
void _Compile_Stack_DropN(int32 stackReg, int n);
void _Compile_DropN_ESP(int n);
void _Compile_SetStackN_WithObject(int32 stackReg, int32 n, int32 obj);
void _Compile_Stack_Push(int32 stackReg, int32 obj);
void _Compile_Move_StackN_To_Reg(int32 reg, int32 stackReg, int32 index);
void _Compile_Move_Reg_To_StackN(int32 stackReg, int32 index, int32 reg);
void _Compile_Move_StackNRm_To_Reg(int32 reg, int32 stackReg, int32 index);
void _Compile_Move_Reg_To_StackNRm_UsingReg(int32 stackReg, int32 index, int32 reg, int32 ureg);
void _Compile_Stack_PushReg(int32 stackReg, int32 reg);
void _Compile_Stack_PopToReg(int32 stackReg, int32 reg);
void Compile_Stack_PushEAX(int32 stackReg);
void Compile_Move_TOS_To_EAX(int32 stackReg);
void Compile_Move_EAX_To_TOS(int32 stackReg);
void Compile_Pop_To_EAX(int32 stackReg);
void Compile_Pop_ToEAX_AndCall(int32 stackReg);
void Compile_MoveImm_To_TOS(int32 stackReg, int32 imm, int32 size);
void _Compile_Stack_Dup(int32 stackReg);
void _Compile_Stack_Pick(int32 stackReg);
void _Compile_Stack_Swap(int32 stackReg);
void Compile_DataStack_PushEAX(void);
void _Compile_Esp_Push(int32 value);
void Compile_DspPop_EspPush(void);
/* core/compiler/sequence.c */
/* core/compiler/logic.c */
void CfrTil_If(void);
void CfrTil_Else(void);
void CfrTil_EndIf(void);
void Compile_Cmp_Set_tttn_Logic(Compiler *compiler, int32 ttt, int32 negateFlag);
void Compile_Equals(Compiler *compiler);
void Compile_DoesNotEqual(Compiler *compiler);
void Compile_LessThan(Compiler *compiler);
void Compile_GreaterThan(Compiler *compiler);
void Compile_LessThanOrEqual(Compiler *compiler);
void Compile_GreaterThanOrEqual(Compiler *compiler);
void Compile_LogicalNot(Compiler *compiler);
void Compile_Logical_X(Compiler *compiler, int32 op);
/* core/dataObjectRun.c */
void _Compile_C_Call_1_Arg(byte *function, int32 arg);
void _Compile_CallFunctionWithArg(byte *function, int32 arg);
void _CfrTil_Do_Object(Word *word);
void _Compile_VarConstOrLit_LValue_To_Reg(Word *word, int32 reg);
void _Compile_VarConstOrLit_RValue_To_Reg(Word *word, int32 reg);
void _Do_LocalVariable(Word *word);
int _Word_CompileAndRecord_PushEAX(Word *word);
void _Do_Literal(int32 value);
void Do_Variable(Word *word);
void _Namespace_DoNamespace(Namespace *ns);
void _CfrTil_Do_ClassField(Word *word);
void _CfrTil_Do_DObject(DObject *dobject);
void DataObject_Run(Word *word);
/* core/compiler/conditionals.c */
CaseNode *_CaseNode_New(int32 type, block block, int32 value);
void _CfrTil_Case(int32 type);
void CfrTil_Case(void);
void Switch_MapFunction(DLNode *node, uint32 switchValue);
void SwitchAccessFunction(void);
void CfrTil_Switch(void);
/* core/compiler/blocks.c */
void _Block_Copy(byte *srcAddress, int32 qsize);
void Block_Copy(byte *dst, byte *src, int32 qsize);
void BlockInfo_Set_tttn(BlockInfo *bi, int32 ttt, int32 n);
void _Block_Eval(block block);
void CfrTil_TurnOffBlockCompiler(void);
void CfrTil_TurnOnBlockCompiler(void);
BlockInfo *_CfrTil_BeginBlock(void);
BlockInfo *CfrTil_BeginBlock(void);
BlockInfo *_CfrTil_EndBlock0(void);
Boolean _Compiler_IsFrameNecessary(Compiler *compiler);
void _CfrTil_EndBlock1(BlockInfo *bi);
void _CfrTil_EndBlock2(BlockInfo *bi);
void CfrTil_EndBlock(void);
/* core/interpreter.c */
void _InterpretString_InContext(byte *str);
void Interpreter_EvalQualifiedID(Word *qid);
void _InterpretString(byte *str);
void _CfrTil_ConditionalInterpret(int32 ifFlag);
void Interpreter_Init(Interpreter *interp);
Interpreter *Interpreter_New(int32 type);
void _Interpreter_Copy(Interpreter *interp, Interpreter *interp0);
Interpreter *Interpreter_Copy(Interpreter *interp0, int32 type);
int32 Interpreter_IsDone(Interpreter *interp, int32 flags);
/* core/compile.c */
void _CompileN(byte *data, int32 size);
void _CompileFromUptoRET(byte *data);
int32 _Compile_Block_WithLogicFlag(byte *srcAddress, int32 bindex, int32 jccFlag, int n);
int32 _Compile_Block(byte *srcAddress, int32 bindex, int32 jccFlag);
void _Compile_WordInline(Word *word);
void _CompileWord(Word *word);
void _CompileFromName(byte *wordName);
void _CompileFromName_Inline(byte *wordName);
void _MoveGotoPoint(DLNode *node, int32 srcAddress, int32 key, int32 dstAddress);
void _GotoInfo_SetAndDelete(GotoInfo *gotoInfo, byte *address);
void _InstallGotoPoint_Key(DLNode *node, int32 bi, int32 key);
void _CheckForGotoPoint(DLNode *node, int32 key, int32 *status);
void _RemoveGotoPoint(DLNode *node, int32 key, int32 *status);
void _CfrTil_InstallGotoCallPoints_Keyed(BlockInfo *bi, int32 key);
void _CfrTil_MoveGotoPoint(int32 srcAddress, int32 key, int32 dstAddress);
int32 CfrTil_CheckForGotoPoints(int32 key);
int32 CfrTil_RemoveGotoPoints(int32 key);
/* core/compiler/optimize.c */
void _GetRmDispImm(CompileOptimizer *optimizer, Word *word, int32 suggestedReg);
void PeepHole_Optimize(void);
int64 _GetWordStackState(Compiler *compiler, int count);
int32 _CheckOptimizeOperands(Compiler *compiler, int32 maxOperands);
int32 CheckOptimizeOperands(Compiler *compiler, int32 maxOperands);
/* core/compiler/bits.c */
void Compile_X_Group3(Compiler *compiler, int32 code);
void Compile_X_Shift(Compiler *compiler, int32 op, int32 stackFlag);
void Compile_BitWise_NOT(Compiler *compiler);
void Compile_BitWise_NEG(Compiler *compiler);
void Compile_ShiftLeft(void);
void Compile_ShiftRight(void);
/* core/compiler/udis.c */
void _Udis_PrintInstruction(ud_t *ud, byte *address, byte *prefix, byte *postfix, byte *debugAddress);
int32 _Udis_GetInstructionSize(ud_t *ud, byte *address);
ud_t *_Udis_Init(ud_t *ud);
int32 _Udis_OneInstruction(ud_t *ud, byte *address, byte *prefix, byte *postfix);
void _Udis_Disassemble(ud_t *ud, byte *address, int32 number, int32 cflag, byte *debugAddress);
/* core/compiler/arrays.c */
int32 _CheckArrayDimensionForVariables(void);
void CfrTil_ArrayBegin(void);
void CfrTil_ArrayEnd(void);
/* core/io.c */
int32 GetTerminalWidth(void);
char kbhit(void);
int _Key(FILE *f);
int Key(void);
void _DoPrompt(void);
void _CfrTil_Prompt(int32 control);
byte _CfrTil_GetC(ReadLiner *rl);
void _Printf(byte *format, ...);
void Printf(byte *format, ...);
PrintStateInfo *PrintStateInfo_New(void);
/* core/compiler/_debug.c */
byte *JccInstructionAddress(byte *address);
byte *JumpCallInstructionAddress(byte *address);
byte *Debugger_DoJcc(Debugger *debugger);
void Debugger_CompileAndDoInstruction(Debugger *debugger, byte *jcAddress, int32 size);
void Debugger_GetWordFromAddress(Debugger *debugger);
void Debugger_StepOneInstruction(Debugger *debugger);
void _CfrTil_ACharacterDump(char aChar);
void CfrTil_CharacterDump(byte *address, int32 number);
void _CfrTil_AByteDump(byte aByte);
void CfrTil_NByteDump(byte *address, int32 number);
byte *GetPostfix(byte *address, char *udInsnAsm, byte *postfix, byte *buffer);
void _Compile_Debug_GetESP(byte *where);
void Compile_Debug_GetESP(void);
void _Compile_Debug1(void);
/* core/symbol.c */
void _Symbol_Init(Symbol *symbol, byte *name);
void _Symbol_Init_AllocName(Symbol *symbol, byte *name, int32 allocType);
Symbol *__Symbol_New(int32 allocType);
Symbol *_Symbol_New(byte *name, int32 allocType);
Symbol *Symbol_New(byte *name);
Symbol *Symbol_NewValue(int32 value, int32 allocType);
Symbol *_aSymbol_CompareName(Symbol *symbol, byte *name);
Symbol *_Symbol_CompareName(Symbol *symbol, byte *name);
/* core/repl.c */
void _Repl(block repl);
/* core/syntax.c */
void _Namespace_Do_C_Type(Namespace *ns);
void Interpret_DoParenthesizedRValue(void);
void CfrTil_InterpretNBlocks(int blocks, int takesLParenFlag);
/* core/dataObjectNew.c */
byte *_CfrTil_NamelessObjectNew(Namespace *ns, int32 size);
void _DObject_Definition_EvalStore(Word *word, uint32 value, uint64 ctype, uint64 funcType, byte *function, int arg);
void _DObject_Finish(Word *word);
Word *_DObject_Init(Word *word, uint32 value, uint64 ctype, uint64 ftype, byte *function, int arg, int32 addToInNs, Namespace *addToNs);
Word *_DObject_New(byte *name, uint32 value, uint64 ctype, uint64 ltype, uint64 ftype, byte *function, int arg, int32 addToInNs, Namespace *addToNs, int32 allocType);
Word *_Class_Object_New(byte *name, uint64 category);
Namespace *_Class_New(byte *name, uint64 type, int32 cloneFlag);
void _CfrTil_MachineCodePrimitive_NewAdd(const char *name, uint64 cType, block *callHook, byte *function, int32 functionArg, const char *nameSpace, const char *superNamespace);
void _CfrTil_ClassField_New(byte *token, Class *aclass, int32 size, int32 offset);
void CfrTil_Class_New(void);
void CfrTil_Class_Clone(void);
void Class_Object_New(byte *name);
void CfrTil_Class_Object_New(void);
DObject *DObject_Sub_New(DObject *proto, byte *name, uint64 category);
DObject *_DObject_NewSlot(DObject *proto, byte *name, int32 value);
void _DObject_NewClone(DObject *proto, byte *name);
void DObject_NewClone(DObject *proto);
void CfrTil_DObject_Clone(void);
void DObject_New(void);
void CfrTil_DObject_New(void);
Word *_CfrTil_Variable(byte *name, int32 value);
void CfrTil_Constant(void);
void _CfrTil_Label(byte *lname);
Word *_CfrTil_LocalWord(byte *name, int32 index, int64 ctype, uint64 ltype);
Word *ConstantOrLiteral_New(Interpreter *interp, uint32 uliteral);
Namespace *_Namespace_New(byte *name, Namespace *containingNs);
Namespace *CfrTil_Type_New(void);
void CfrTil_Typedef(void);
Word *_DataObject_New(uint64 type, byte *name, uint64 ctype, uint64 ltype, int32 index, int32 value);
/* core/cfrtil.c */
void _CfrTil_Run(CfrTil *cfrTil);
void CfrTil_CpuState_Show(void);
void _CfrTil_NamespacesInit(CfrTil *cfrTil);
void _CfrTil_SetStackPointerFromDsp(CfrTil *cfrTil);
void CfrTil_SyncStackPointerFromDsp(CfrTil *cfrTil);
void _CfrTil_SetDspFromStackPointer(CfrTil *cfrTil);
void CfrTil_SetDspFromStackPointer(CfrTil *cfrTil);
void CfrTil_DataStack_InitEssential(CfrTil *cfrTil);
void _CfrTil_DataStack_Init(CfrTil *cfrTil);
void CfrTil_DataStack_Init(void);
void _CfrTil_Init(CfrTil *cfrTil, Namespace *nss);
CfrTil *_CfrTil_New(CfrTil *cfrTil);
void CfrTil_Delete(CfrTil *cfrTil, int stackFlag);
void CfrTil_Lexer_SourceCodeOn(void);
void _CfrTil_AddStringToSourceCode(byte *str);
void SC_ScratchPadIndex_Init(void);
void __CfrTil_InitSourceCode(void);
void _InitSourceCode(int32 force);
void _CfrTil_InitSourceCode(void);
void _CfrTil_InitSourceCode_WithName(byte *name);
void CfrTil_InitSourceCode_WithCurrentInputChar(void);
void _CfrTil_FinishSourceCode(Word *word);
void _CfrTil_UnAppendFromSourceCode(int nchars);
void _CfrTil_UnAppendTokenFromSourceCode(byte *tkn);
void _CfrTil_AppendCharToSourceCode(byte c);
byte *_CfrTil_AddSymbolToHeadOfTokenList(Symbol *tknSym);
byte *_CfrTil_AddNewTokenSymbolToHeadOfTokenList(byte *token);
byte *_CfrTil_GetTokenFromPeekedTokenList(void);
void _CfrTil_AddTokenToTailOfPeekTokenList(byte *token);
void _CfrTil_AddTokenToHeadOfPeekTokenList(byte *token);
/* core/parse.c */
void _CfrTil_Parse_ClassStructure(int32 cloneFlag);
void Compile_InitRegisterVariables(Compiler *compiler);
Namespace *_CfrTil_Parse_LocalsAndStackVariables(int32 svf, int32 debugFlag, int32 lispMode, ListObject *args);
void _Lexer_ParseString(Lexer *lexer, int32 allocType);
void Lexer_ParseString(Lexer *lexer);
void Lexer_ParseBinary(Lexer *lexer, int offset);
void Lexer_ParseBigNum(Lexer *lexer, byte *token);
void _Lexer_ParseObject(Lexer *lexer, byte *token, int32 allocType);
void Lexer_ParseObject(Lexer *lexer, byte *token);
void CfrTil_Parse(void);
byte *Parse_Macro(int64 type);
/* core/memSpace.c */
void _MemChunk_CheckAndInit(MemChunk *mchunk, int32 size, uint64 type);
byte *_MemChunk_Allocate(int32 size, uint64 type);
byte *MemList_AllocateChunk(DLList *list, int32 osize, uint64 type);
byte *_Mem_Allocate(int32 size, uint64 type);
byte *Mem_Allocate(DLList *list, int32 size, uint64 type);
byte *_CfrTil_AllocateNew(int32 size, int32 type);
void _Mem_ChunkFree(MemChunk *mchunk);
void Mem_FreeItem(DLList *mList, byte *item);
void FreeChunkList(DLList *list);
void NBA_FreeChunkType(NBA *nba, uint64 type, int32 exactFlag);
void _MemList_FreeExactType(DLList *list, int type);
void _MemList_FreeVariousTypes(DLList *list, int type);
void NBAsMemList_FreeExactType(int type);
void NBAsMemList_FreeVariousTypes(int type);
void _NamedByteArray_AddNewByteArray(NamedByteArray *nba, int32 size);
NamedByteArray *_NamedByteArray_Allocate(void);
void _NamedByteArray_Init(NamedByteArray *nba, byte *name, int32 size, int32 atype);
NamedByteArray *NamedByteArray_New(byte *name, int32 size, int32 atype);
void OVT_MemList_FreeNBAMemory(byte *name, uint32 moreThan, int32 always);
void OVT_MemListFree_Objects(void);
void OVT_MemListFree_TempObjects(void);
void OVT_MemListFree_ContextMemory(void);
void OVT_MemListFree_CompilerTempObjects(void);
void OVT_MemListFree_LispTemp(void);
void OVT_MemListFree_Session(void);
void OVT_MemListFree_CfrTilInternal(void);
void OVT_MemListFree_HistorySpace(void);
void NBA_Show(NamedByteArray *nba);
int32 _MemList_GetCurrentMemAllocated(DLList *list, int32 flag);
void Calculate_CurrentMemoryAllocationInfo(void);
void CfrTil_MemoryAllocated(void);
NamedByteArray *_OVT_Find_NBA(byte *name);
NamedByteArray *MemorySpace_NBA_New(MemorySpace *memSpace, byte *name, int32 size, int32 atype);
void MemorySpace_Init(MemorySpace *ms);
MemorySpace *MemorySpace_New(OpenVmTil *ovt);
/* core/init.c */
void _CfrTil_Init_SessionCore(CfrTil *cfrTil, int32 cntxDelFlag, int32 promptFlag);
void CfrTil_ContextInit(void);
void CfrTil_ResetAll_Init(CfrTil *cfrTil);
void _CfrTil_InitialAddWordToNamespace(Word *word, byte *containingNamespaceName, byte *superNamespaceName);
void _CfrTil_CPrimitiveNewAdd(const char *name, block b, uint64 ctype, uint64 ltype, const char *nameSpace, const char *superNamespace);
void CfrTil_AddCPrimitives(void);
void CfrTil_MachineCodePrimitive_AddWords(void);
/* core/system.c */
void *_dlsym(char *sym, char *lib);
void CfrTil_dlsym(void);
void CfrTil_system0(void);
void CfrTil_system1(void);
void CfrTil_system2(void);
void CfrTil_system3(void);
char *_CfrTil_GetSystemState_String0(byte *buf);
char *_CfrTil_GetSystemState_String1(char *buf);
void _CfrTil_SystemState_Print(int32 pflag);
void __CfrTil_Dump(int32 address, int32 number, int32 dumpMod);
void _CfrTil_Source(Word *word, int32 addToHistoryFlag);
void _CfrTil_Dump(int32 dumpMod);
/* core/charSet.c */
Boolean CharTable_IsCharType(byte c, int32 type);
int32 CharSet_IsDelimiter(CharSet *cset, byte ch);
void CharSet_SetChar(CharSet *cset, byte ch);
void CharSet_UnSetChar(CharSet *cset, byte ch);
CharSet *CharSet_Init(CharSet *cset, int32 size, byte *initString);
CharSet *CharSet_Allocate(int32 size, int32 allocType);
CharSet *_CharSet_New(byte *initString, int32 size, int32 allocType);
CharSet *CharSet_New(byte *initString, int32 allocType);
/* core/dllist.c */
void _DLNode_Init(DLNode *node);
DLNode *_DLNode_New(uint64 allocType);
DLNode *DLNode_Next(DLNode *node);
DLNode *DLNode_Previous(DLNode *node);
void DLNode_InsertThisAfterANode(DLNode *node, DLNode *anode);
void DLNode_InsertThisBeforeANode(DLNode *node, DLNode *anode);
void DLNode_ReplaceNodeWithANode(DLNode *node, DLNode *anode);
DLNode *DLNode_Remove(DLNode *node);
void _DLList_Init(DLList *list);
void DLList_Init(DLList *list, DLNode *head, DLNode *tail);
DLList *_DLList_New(uint64 allocType);
DLList *DLList_New(void);
void DLList_ReInit(DLList *list);
void _DLList_AddNodeToHead(DLList *list, DLNode *node);
void DLList_AddNodeToHead(DLList *list, DLNode *node);
void DLList_AddNodeToTail(DLList *list, DLNode *node);
DLNode *DLList_Head(DLList *list);
DLNode *DLList_Tail(DLList *list);
DLNode *_DLList_First(DLList *list);
DLNode *DLList_First(DLList *list);
DLNode *_DLList_Last(DLList *list);
DLNode *DLList_Last(DLList *list);
DLNode *DLList_NodePrevious(DLList *list, DLNode *node);
DLNode *DLList_NodeNext(DLList *list, DLNode *node);
DLNode *_DLList_Before(DLList *list);
DLNode *DLList_Before(DLList *list);
DLNode *_DLList_After(DLList *list);
DLNode *DLList_After(DLList *list);
void DLList_Map(DLList *list, MapFunction0 mf);
void DLList_Map1(DLList *list, MapFunction1 mf, int32 one);
void DLList_Map2(DLList *list, MapFunction2 mf, int32 one, int32 two);
void DLList_Map2_64(DLList *list, MapFunction2_64 mf, uint64 one, int32 two);
void DLList_Map3(DLList *list, MapFunction3 mf, int32 one, int32 two, int32 three);
void DLList_Map_OnePlusStatus(DLList *list, MapFunction2 mf, int32 one, int32 *status);
DLNode *_DLList_AddNamedValue(DLList *list, byte *name, int32 value, int32 allocType);
DLNode *_DLList_AddValue(DLList *list, int32 value, int32 allocType);
/* core/interpret.c */
Boolean _Interpreter_IsPrefixWord(Interpreter *interp, Word *word);
void _Interpreter_Do_MorphismWord(Interpreter *interp, Word *word);
void _Interpreter_SetupFor_MorphismWord(Interpreter *interp, Word *word);
void _Interpret_MorphismWord_Default(Interpreter *interp, Word *word);
void Interpret_MorphismWord_Default(Word *word);
Word *_Interpreter_InterpretAToken(Interpreter *interp, byte *token);
void Interpreter_InterpretNextToken(Interpreter *interp);
void _Interpret_PrefixFunction_Until_Token(Interpreter *interp, Word *prefixFunction, byte *end, byte *delimiters);
void _Interpret_PrefixFunction_Until_RParen(Interpreter *interp, Word *prefixFunction);
void _Interpret_UntilFlagged(Interpreter *interp, int32 doneFlags);
void _Interpret_ToEndOfLine(Interpreter *interp);
void Interpret_UntilFlaggedWithInit(Interpreter *interp, int32 doneFlags);
/* core/lexer.c */
void CfrTil_LexerTables_Setup(CfrTil *cfrtl);
byte Lexer_NextNonDelimiterChar(Lexer *lexer);
byte *Lexer_StrTok(Lexer *lexer);
Word *Lexer_ObjectToken_New(Lexer *lexer, byte *token, int32 parseFlag);
byte *_Lexer_NextNonDebugTokenWord(Lexer *lexer);
byte *Lexer_PeekNextNonDebugTokenWord(Lexer *lexer);
byte *_Lexer_ParseNextToken_WithDelimiters(Lexer *lexer, byte *delimiters, int32 checkListFlag);
void Lexer_ParseNextToken_WithDelimiters(Lexer *lexer, byte *delimiters);
byte *_Lexer_ReadToken(Lexer *lexer, byte *delimiters);
byte *Lexer_ReadToken(Lexer *lexer);
void _Lexer_AppendCharacterToTokenBuffer(Lexer *lexer);
void Lexer_Append_ConvertedCharacterToTokenBuffer(Lexer *lexer);
void Lexer_AppendCharacterToTokenBuffer(Lexer *lexer);
byte Lexer_UnAppendCharacterToTokenBuffer(Lexer *lexer);
byte Lexer_LastChar(Lexer *lexer);
void Lexer_SetTokenDelimiters(Lexer *lexer, byte *delimiters, int32 allocType);
void Lexer_SetBasicTokenDelimiters(Lexer *lexer, byte *delimiters, int32 allocType);
void Lexer_Init(Lexer *lexer, byte *delimiters, int32 state, int32 allocType);
Lexer *Lexer_New(int32 allocType);
void _Lexer_Copy(Lexer *lexer, Lexer *lexer0, int32 allocType);
Lexer *Lexer_Copy(Lexer *lexer0, int32 allocType);
void RestartToken(Lexer *lexer);
void Lexer_SourceCodeOn(Lexer *lexer);
void Lexer_SourceCodeOff(Lexer *lexer);
void _Lexer_AppendCharToSourceCode(Lexer *lexer, byte c);
void Lexer_DoDelimiter(Lexer *lexer);
Boolean Lexer_IsCurrentInputCharADelimiter(Lexer *lexer);
void Lexer_Default(Lexer *lexer);
void TerminatingMacro(Lexer *lexer);
void NonTerminatingMacro(Lexer *lexer);
int32 _Lexer_MacroChar_NamespaceCheck(Lexer *lexer, byte *namespace);
void Lexer_FinishTokenHere(Lexer *lexer);
void SingleEscape(Lexer *lexer);
void _MultipleEscape(Lexer *lexer);
void DoubleQuote(Lexer *lexer);
void Minus(Lexer *lexer);
void ForwardSlash(Lexer *lexer);
void AddressOf(Lexer *lexer);
void Semi(Lexer *lexer);
void GreaterThan(Lexer *lexer);
void Dot(Lexer *lexer);
void Lexer_DoReplMacro(Lexer *lexer);
void Lexer_CheckMacroRepl(Lexer *lexer);
void Comma(Lexer *lexer);
void BackSlash(Lexer *lexer);
void CarriageReturn(Lexer *lexer);
void NewLine(Lexer *lexer);
void _EOF(Lexer *lexer);
void _Zero(Lexer *lexer);
int32 Lexer_CheckIfDone(Lexer *lexer, int32 flags);
byte _Lexer_NextChar(ReadLiner *rl);
void Lexer_SetInputFunction(Lexer *lexer, byte (*lipf)(void));
void Lexer_DoChar(Lexer *lexer);
Boolean Lexer_IsTokenQualifiedID(Lexer *lexer);
Boolean Lexer_IsTokenForwardDotted(Lexer *lexer);
/* core/cstack.c */
void _Stack_PrintHeader(Stack *stack, char *name);
void _Stack_PrintValues(byte *name, int *stackPointer, int stackDepth);
void _Stack_Print(Stack *stack, char *name);
int32 _Stack_Overflow(Stack *stack);
int32 _Stack_IsEmpty(Stack *stack);
void _Stack_Push(Stack *stack, int32 value);
void _Stack_Dup(Stack *stack);
int32 __Stack_Pop(Stack *stack);
int32 _Stack_Pop_ExceptionFlag(Stack *stack, int32 exceptionOnEmptyFlag);
int32 _Stack_Pop(Stack *stack);
int32 _Stack_PopOrTop(Stack *stack);
int32 _Stack_DropN(Stack *stack, int32 n);
int32 _Stack_Top(Stack *stack);
int32 _Stack_Pick(Stack *stack, int32 offset);
int32 _Stack_PickFromBottom(Stack *stack, int32 offset);
int32 _Stack_Bottom(Stack *stack);
void _Stack_SetBottom(Stack *stack, int32 value);
void _Stack_SetTop(Stack *stack, int32 value);
int32 _Stack_NOS(Stack *stack);
void _Stack_Drop(Stack *stack);
void Stack_Push(Stack *stack, int32 value);
int32 Stack_Pop_WithExceptionOnEmpty(Stack *stack);
int32 Stack_Pop_WithZeroOnEmpty(Stack *stack);
void Stack_Dup(Stack *stack);
int32 _Stack_IntegrityCheck(Stack *stack);
int32 _Stack_Depth(Stack *stack);
int32 Stack_Depth(Stack *stack);
void Stack_SetStackMax(Stack *stack, int32 value);
void CfrTil_memset(register byte *dst, int32 value, register int32 n);
void _Stack_Init(Stack *stack, int32 slots);
void Stack_Delete(Stack *stack);
void Stack_Init(Stack *stack);
Stack *Stack_New(int32 slots, int32 type);
Stack *Stack_Copy(Stack *stack, int32 type);
/* core/classes.c */
void CfrTil_ClassStructureEnd(void);
void CfrTil_ClassStructureBegin(void);
void CfrTil_CloneStructureBegin(void);
/* core/debugOutput.c */
void Debugger_Disassemble(Debugger *debugger);
void _Debugger_DisassembleWrittenCode(Debugger *debugger);
void Debugger_Locals_Show(Debugger *debugger);
void Debugger_ShowWrittenCode(Debugger *debugger, int32 stepFlag);
void _CfrTil_ShowInfo(byte *prompt, int32 signal);
void Debugger_ShowInfo(Debugger *debugger, byte *prompt, int32 signal);
void Debugger_ShowState(Debugger *debugger, byte *prompt);
void Debugger_ConsiderAndShowWord(Debugger *debugger);
/* core/namespace.c */
Namespace *Namespace_NextNamespace(Word *w);
void _Namespace_DoSetState(Namespace *ns, int32 state);
Namespace *_Namespace_IsUsing(Namespace *ns);
Namespace *Namespace_IsUsing(byte *name);
void _Namespace_AddToNamespacesHead_SetAsInNamespace(Namespace *ns);
void _Namespace_AddToNamespacesTail(Namespace *ns);
void _Namespace_SetState(Namespace *ns, int32 state);
Word *_Namespace_FirstOnUsingList(void);
void _Namespace_AddToUsingList(Namespace *ns);
void _Namespace_ActivateAsPrimary(Namespace *ns);
void Namespace_ActivateAsPrimary(byte *name);
void Namespace_MoveToTail(byte *name);
void Namespace_SetAsNotUsing(byte *name);
void _Namespace_SetAsNotUsing_MoveToTail(Namespace *ns);
void Namespace_SetAsNotUsing_MoveToTail(byte *name);
int32 _Namespace_VariableValueGet(Namespace *ns, byte *name);
Namespace *_CfrTil_Namespace_InNamespaceSet(Namespace *ns);
Namespace *CfrTil_Namespace_InNamespaceSet(byte *name);
Namespace *_CfrTil_Namespace_InNamespaceGet(void);
Namespace *_CfrTil_InNamespace(void);
Boolean _CfrTil_AreWeInThisNamespace(byte *name);
Boolean _CfrTil_IsContainingNamespace(byte *wordName, byte *namespaceName);
void Namespace_DoNamespace(byte *name);
void Symbol_NamespacePrettyPrint(Symbol *symbol, int32 indentFlag, int32 indentLevel);
void _Namespace_DoAddSymbol(Namespace *ns, Symbol *symbol);
void _Namespace_DoAddWord(Namespace *ns, Word *word);
Namespace *_Namespace_Find(byte *name, Namespace *superNamespace, int32 exceptionFlag);
Namespace *Namespace_Find(byte *name);
void _Namespace_UsingLast(byte *name);
void _Namespace_RemoveFromUsingList(Namespace *ns);
void Namespace_RemoveFromUsingList(byte *name);
void _RemoveSubNamespacesFromUsingList(Symbol *symbol, Namespace *ns);
void Namespace_MoveToFirstOnUsingList(byte *name);
void Namespace_RemoveFromUsingList_WithCheck(byte *name);
void _Namespace_Clear(Namespace *ns);
void Namespace_Clear(byte *name);
void Namespace_AddWord(Namespace *ns, Word *word);
Namespace *Namespace_FindOrNew_SetUsing(byte *name, Namespace *containingNs, int32 setUsingFlag);
Namespace *Namespace_FindOrNew_Local(void);
void _Tree_Map_State_2(DLList *list, int32 state, MapSymbolFunction2 mf, int32 one, int32 two);
int32 _Tree_Map_FromANode(DLNode *node, cMapFunction_1 mf);
int32 _Tree_Map(DLList *list, cMapFunction_1 mf);
void _Namespace_MapAny_2Args(MapSymbolFunction2 msf2, int32 one, int32 two);
void _Namespace_MapUsing_2Args(MapSymbolFunction2 msf2, int32 one, int32 two);
/* core/history.c */
HistoryStringNode *HistoryStringNode_New(byte *hstring);
HistoryStringNode *HistorySymbolList_Find(byte *hstring);
void ReadLine_ShowHistoryNode(ReadLiner *rl);
void _OpenVmTil_AddStringToHistoryList(byte *istring);
void OpenVmTil_AddStringToHistory(void);
void OpenVmTil_AddStringToHistoryOn(void);
void OpenVmTil_AddStringToHistoryOff(void);
void HistorySpace_Delete(void);
HistorySpace *_HistorySpace_Init(OpenVmTil *ovt, int32 reset);
void _HistorySpace_New(OpenVmTil *ovt, int32 resetFlag);
void HistorySpace_Reset(void);
/* core/readline.c */
void _ReadLine_NullDelimitInputBuffer(ReadLiner *rl);
void _ReadLine_QuickAppendCharacter(ReadLiner *rl, byte chr);
void _ReadLine_SetOutputLineCharacterNumber(ReadLiner *rl);
void __ReadLine_AppendCharacter(ReadLiner *rl, byte chr);
void __ReadLine_AppendCharacter_Actual(ReadLiner *rl, byte chr);
void _ReadLine_AppendCharacter(ReadLiner *rl);
void _ReadLine_AppendCharacter_Actual(ReadLiner *rl);
void ReadLine_DoCursorMoveInput(ReadLiner *rl, int32 newCursorPosition);
void ReadLine_SetCursorPosition(ReadLiner *rl, int32 pos);
void ReadLiner_CommentToEndOfLine(ReadLiner *rl);
void ReadLiner_Done(ReadLiner *rl);
Boolean ReadLiner_IsDone(ReadLiner *rl);
void _ReadLine_MoveInputStartToLineStart(int32 fromPosition);
void _ReadLine_PrintfClearTerminalLine(void);
void ReadLine_ClearCurrentTerminalLine(ReadLiner *rl, int32 fromPosition);
void ReadLine_SetInputLine(ReadLiner *rl, byte *buffer);
void ReadLine_InputLine_Clear(ReadLiner *rl);
void ReadLine_InputLine_Init(ReadLiner *rl);
void ReadLine_RunInit(ReadLiner *rl);
void ReadLine_Init(ReadLiner *rl, ReadLiner_KeyFunction ipf, int32 type);
ReadLiner *ReadLine_New(int32 type);
void _ReadLine_Copy(ReadLiner *rl, ReadLiner *rl0, int32 type);
ReadLiner *ReadLine_Copy(ReadLiner *rl0, int32 type);
void ReadLine_TabWordCompletion(ReadLiner *rl);
void __ReadLine_AppendCharacterAndCursoRight(ReadLiner *rl, byte c);
void _ReadLine_AppendCharacterAndCursoRight(ReadLiner *rl);
void _ReadLine_AppendAndShowCharacter(ReadLiner *rl, byte c);
void ReadLine_AppendAndShowCharacter(ReadLiner *rl);
byte *ReadLine_GetPrompt(ReadLiner *rl);
void ReadLine_SetPrompt(ReadLiner *rl, byte *newPrompt);
byte *ReadLine_GetAltPrompt(ReadLiner *rl);
byte *ReadLine_GetNormalPrompt(ReadLiner *rl);
void _ReadLine_Show(ReadLiner *rl, byte *prompt);
void _ReadLine_ShowPad(ReadLiner *rl, byte *prompt);
void ReadLine_ShowPad(ReadLiner *rl);
void _ReadLine_ClearAndShowPad(ReadLiner *rl, byte *prompt);
void __ReadLine_DoStringInput(ReadLiner *rl, byte *string, byte *prompt);
void ReadLine_ClearAndShowPad(ReadLiner *rl);
void _ReadLine_ShowCursor(ReadLiner *rl, byte *prompt);
void ReadLine_ShowCursor(ReadLiner *rl);
void _ReadLine_DoStringInput(ReadLiner *rl, byte *string, byte *prompt);
void ReadLine_ShowStringWithCursor(ReadLiner *rl, byte *string);
void ReadLine_ClearAndShowPadWithCursor(ReadLiner *rl);
void ReadLine_ShowNormalPrompt(ReadLiner *rl);
void ReadLine_InsertCharacter(ReadLiner *rl);
void ReadLine_SaveCharacter(ReadLiner *rl);
void _ReadLine_InsertStringIntoInputLineSlotAndShow(ReadLiner *rl, int32 startOfSlot, int32 endOfSlot, byte *data);
void ReadLiner_InsertTextMacro(ReadLiner *rl, Word *word);
void ReadLine_DeleteChar(ReadLiner *rl);
int32 ReadLine_IsLastCharADot(ReadLiner *rl, int32 pos);
int32 ReadLine_FirstCharOfToken_FromLastChar(ReadLiner *rl, int32 pos);
int32 ReadLine_IsThereADotSeparator(ReadLiner *rl, int32 pos);
int32 ReadLine_LastCharOfLastToken_FromPos(ReadLiner *rl, int32 pos);
int32 ReadLine_EndOfLastToken(ReadLiner *rl);
int32 ReadLine_BeginningOfLastToken(ReadLiner *rl);
Boolean ReadLine_IsReverseTokenQualifiedID(ReadLiner *rl);
byte ReadLine_Key(ReadLiner *rl);
void ReadLine_SetRawInputFunction(ReadLiner *rl, ReadLiner_KeyFunction ripf);
void ReadLine_SetInputString(ReadLiner *rl, byte *string);
void _ReadLine_TabCompletion_Check(ReadLiner *rl);
void ReadLine_GetLine(ReadLiner *rl);
byte ReadLine_NextChar(ReadLiner *rl);
byte ReadLine_GetNextCharFromString(ReadLiner *rl);
void Readline_Setup_OneStringInterpret(ReadLiner *rl, byte *str);
int32 _Readline_CheckArrayDimensionForVariables(ReadLiner *rl);
/* core/dataStack.c */
int32 _DataStack_Pop(void);
void _DataStack_Push(int32 value);
void _DataStack_Dup(void);
void _DataStack_DropN(int n);
void _DataStack_Drop(void);
int32 DataStack_Overflow(void);
int32 DataStack_Underflow(void);
void DataStack_Check(void);
int32 DataStack_Depth(void);
int32 DataStack_Pop(void);
/* core/context.c */
byte *_Context_Location(Context *cntx);
byte *Context_Location(void);
void Context_Delete(Context *context);
Context *_Context_New(CfrTil *cfrTil, int32 allocType);
void _Context_Run_1(Context *cntx, ContextFunction_1 contextFunction, byte *arg);
void _Context_Run(Context *cntx, ContextFunction contextFunction);
Context *CfrTil_Context_PushNew(CfrTil *cfrTil, int32 allocType);
void CfrTil_Context_PopDelete(CfrTil *cfrTil);
void _CfrTil_Contex_NewRun_1(CfrTil *cfrTil, ContextFunction_1 contextFunction, byte *arg, int32 allocType);
void _CfrTil_Contex_NewRun_Void(CfrTil *cfrTil, Word *word, int32 allocType);
void _Context_InterpretString(Context *cntx, byte *str);
void _CfrTil_ContextNew_InterpretString(CfrTil *cfrTil, byte *str, int32 allocType);
void _Context_InterpretFile(Context *cntx);
void _Context_IncludeFile(Context *cntx, byte *filename);
void _CfrTil_ContextNew_IncludeFile(byte *filename);
int32 _Context_StrCmpNextToken(Context *cntx, byte *check);
void _Context_DoubleQuoteMacro(Context *cntx);
void Context_DoubleQuoteMacro(void);
void _Tick(Context *cntx);
void MultipleEscape(void);
void Context_Interpret(Context *cntx);
/* core/_system.c */
void _System_TimerInit(System *system, int32 i);
void _System_Time(System *system, uint timer, char *format, byte *toString);
void System_Time(System *system, uint timer, char *string, int tflag);
void System_InitTime(System *system);
void System_RunInit(System *system);
void _System_Copy(System *system, System *system0, int32 type);
System *System_Copy(System *system0, int32 type);
void _System_Init(System *system);
void System_Init(System *system);
System *System_New(int32 type);
/* core/word.c */
void _Word_Location_Printf(Word *word);
byte *_Word_Location_pbyte(Word *word);
void Word_PrintName(Word *word);
void _Word_Print(Word *word);
void __Word_ShowSourceCode(Word *word);
void _Word_ShowSourceCode(Word *word);
Word *Word_GetFromCodeAddress(byte *address);
Word *Word_GetFromCodeAddress_NoAlias(byte *address);
void _CfrTil_WordName_Run(byte *name);
void _Word_Run(Word *word);
void _Word_Eval(Word *word);
Namespace *_Word_Namespace(Word *word);
void _CfrTil_AddSymbol(Symbol *symbol);
void _CfrTil_AddWord(Word *word);
Word *_Word_Allocate(uint64 category);
void _Word_Copy(Word *word, Word *word0);
Word *Word_Copy(Word *word0, int32 type);
Word *_Word_Init(Word *word, uint64 ctype, uint64 ltype);
Word *_Word_New(byte *name, uint64 ctype, uint64 ltype, int32 allocType);
void _Word_Finish(Word *word);
void _Word_Add(Word *word, int32 addToInNs, Namespace *addToNs);
void _Word_DefinitionStore(Word *word, block code);
void _Word(Word *word, byte *code);
Word *_Word_Create(byte *name);
/* core/readTable.c */
void CfrTil_ReadTables_Setup(CfrTil *cfrl);
void ReadTable_Default(ReadLiner *rl);
void ReadTable_LParen(ReadLiner *rl);
void ReadTable_Tab(ReadLiner *rl);
void ReadTable_0x03(ReadLiner *rl);
void ReadTable_0x04(ReadLiner *rl);
void ReadTable_CarriageReturn(ReadLiner *rl);
void ReadTable_Newline(ReadLiner *rl);
void ReadTable_Zero(ReadLiner *rl);
void ReadTable_EOF(ReadLiner *rl);
void ReadTable_ESC(ReadLiner *rl);
void ReadTable_LeftBracket(ReadLiner *rl);
void ReadTable_A(ReadLiner *rl);
void ReadTable_B(ReadLiner *rl);
void ReadTable_C(ReadLiner *rl);
void ReadTable_D(ReadLiner *rl);
void ReadTable_F(ReadLiner *rl);
void ReadTable_H(ReadLiner *rl);
void ReadTable_4(ReadLiner *rl);
void ReadTable_3(ReadLiner *rl);
void ReadTable_1(ReadLiner *rl);
void ReadTable_O(ReadLiner *rl);
void ReadTable_Tilde(ReadLiner *rl);
void ReadTable_BackSpace(ReadLiner *rl);
/* core/bigNum.c */
mpz_t *_CfrTil_BigInt_New(int32 initializer);
void CfrTil_BigInt_Init(void);
void CfrTil_BigInt_Add(void);
void CfrTil_BigInt_PlusEqual(void);
void CfrTil_BigInt_MinusMinus(void);
void CfrTil_BigInt_PlusPlus(void);
void CfrTil_BigInt_Multiply(void);
void CfrTil_BigInt_Power(void);
void CfrTil_BigInt_MultiplyEqual(void);
void CfrTil_BigInt_DivideWithRemainder(void);
void CfrTil_BigInt_DivideEqual_RemainderDiscarded(void);
void CfrTil_BigInt_Subtract(void);
void CfrTil_BigInt_MinusEqual(void);
int32 _CfrTil_BigInt_Cmp(void);
void CfrTil_BigInt_LessThanOrEqual(void);
void CfrTil_BigInt_LogicalEquals(void);
void CfrTil_BigInt_LogicalDoesNotEqual(void);
void CfrTil_BigInt_GreaterThan(void);
void CfrTil_BigInt_GreaterThanOrEqual(void);
void CfrTil_BigInt_LessThan(void);
void CfrTil_BigInt_Print(void);
mpf_t *_CfrTil_BigFloat_New(int32 initializer);
void CfrTil_BigFloat_Init(void);
void CfrTil_BigFloat_Precision(void);
void CfrTil_BigFloat_Width(void);
void CfrTil_BigFloat_Add(void);
void CfrTil_BigFloat_Multiply(void);
void CfrTil_BigFloat_Divide(void);
void CfrTil_BigFloat_Power(void);
void CfrTil_BigFloat_Subtract(void);
int32 _CfrTil_BigFloat_Cmp(void);
void CfrTil_BigFloat_Equal(void);
void CfrTil_BigFloat_LessThanOrEqual(void);
void CfrTil_BigFloat_GreaterThan(void);
void CfrTil_BigFloat_GreaterThanOrEqual(void);
void CfrTil_BigFloat_LessThan(void);
void CfrTil_BigFloat_FPrint(void);
void CfrTil_BigFloat_EPrint(void);
/* core/readinline.c */
byte *_ReadLine_pb_NextChar(ReadLiner *rl);
byte _ReadLine_NextChar(ReadLiner *rl);
byte ReadLine_PeekNextChar(ReadLiner *rl);
byte _ReadLine_GetNextChar(ReadLiner *rl);
void _ReadLine_EndThisLine(ReadLiner *rl);
byte ReadLine_CurrentReadChar(ReadLiner *rl);
byte *ReadLine_BytePointerToCurrentReadChar(ReadLiner *rl);
byte ReadLine_LastChar(ReadLiner *rl);
byte ReadLine_PeekNextNonWhitespaceChar(ReadLiner *rl);
int ReadLine_IsThereNextChar(ReadLiner *rl);
void ReadLine_UnGetChar(ReadLiner *rl);
void _ReadLine_ShowCharacter(ReadLiner *rl, byte chr);
void ReadLine_ShowCharacter(ReadLiner *rl);
void _ReadLine_SetMaxEndPosition(ReadLiner *rl);
void _ReadLine_SetEndPosition(ReadLiner *rl);
byte _ReadLine_CharAtCursor(ReadLiner *rl);
int _ReadLine_CharAtACursorPos(ReadLiner *rl, int32 pos);
void _ReadLine_CursorToEnd(ReadLiner *rl);
void _ReadLine_CursorToStart(ReadLiner *rl);
void _ReadLine_CursorRight(ReadLiner *rl);
void _ReadLine_CursorLeft(ReadLiner *rl);
/* core/array.c */
byte *_ByteArray_AppendSpace(ByteArray *array, int32 size);
void _ByteArray_UnAppendSpace(ByteArray *array, int32 size);
void _ByteArray_DataClear(ByteArray *array);
void _ByteArray_Init(ByteArray *array, int32 size);
void _ByteArray_ReInit(ByteArray *array);
ByteArray *_ByteArray_AllocateNew_(DLList *list, int32 size, int64 type);
ByteArray *_ByteArray_AllocateNew(NamedByteArray *nba, int32 size);
byte *_ByteArray_GetEndIndex(ByteArray *array);
byte *_ByteArray_Here(ByteArray *array);
void _ByteArray_SetEndIndex(ByteArray *array, byte *index);
void _ByteArray_SetHere(ByteArray *array, byte *index);
void _ByteArray_SetHere_AndForDebug(ByteArray *array, byte *index);
byte *_ByteArray_GetStartIndex(ByteArray *array);
void _ByteArray_SetStartIndex(ByteArray *array, byte *index);
void ByteArray_AppendCopyItem(ByteArray *array, int32 size, int32 data);
void ByteArray_AppendCopy(ByteArray *array, int32 size, byte *data);
void ByteArray_AppendCopyUpToRET(ByteArray *array, byte *data);
/* core/compiler.c */
void _Compiler_SetCompilingSpace(byte *name);
Word *Compiler_PreviousNonDebugWord(void);
void _Compiler_FreeBlockInfoLocalsNamespace(BlockInfo *bi, Compiler *compiler);
void _Compiler_FreeLocalsNamespace(Compiler *compiler);
void _Compiler_WordStack_PushWord(Compiler *compiler, Word *word);
void _Compiler_FreeAllLocalsNamespaces(Compiler *compiler);
void CompileOptimizer_Init(CompileOptimizer *optimizer);
void CompileOptimizer_NewInit(CompileOptimizer *optimizer);
CompileOptimizer *CompileOptimizer_New(int32 type);
void CompileOptimizer_Delete(CompileOptimizer *optimizer);
void CfrTil_InitBlockSystem(Compiler *compiler);
void Compiler_Init(Compiler *compiler, int32 state);
Compiler *Compiler_New(int32 type);
void CfrTil_CalculateAndSetPreviousJmpOffset(byte *jmpToAddress);
void CfrTil_CalculateAndSetPreviousJmpOffset_ToHere(void);
void __Stack_PointerToJmpOffset_Set(byte *address);
void _Stack_PointerToJmpOffset_Set(void);
/* core/dllnodes.c */
void _DLNode_AsWord_Print(DLNode *node);
/* core/finder.c */
Word *_WordList_DescendMap_1(Word *word, int32 state, int32 stayInOneNamespaceFlag, MapFunction_Cell_1 mf, int32 one);
Word *Word_FindInOneNamespace(Namespace *ns, byte *name);
Word *_Word_Find_Minimal(DLList *list, int32 state, byte *name);
Word *_Word_Find(int32 state, byte *name);
Word *Word_FindUsing(byte *name);
Word *_Word_FindAny(byte *name);
Word *Word_Find(byte *name);
void Finder_Init(Finder *finder);
Finder *Finder_New(int32 allocationType);
Symbol *_Finder_CompareDefinitionAddress(Symbol *symbol, byte *address);
Symbol *_Finder_CompareDefinitionAddress_NoAlias(Symbol *symbol, byte *address);
Word *Finder_Address_FindInOneNamespace(Finder *finder, Namespace *ns, byte *address);
Word *Finder_Address_FindAny(Finder *finder, byte *address);
Word *Finder_Address_FindAny_NoAlias(Finder *finder, byte *address);
void Finder_SetQualifyingNamespace(Finder *finder, Namespace *ns);
void Finder_SetNamedQualifyingNamespace(Finder *finder, byte *name);
Namespace *Finder_GetQualifyingNamespace(Finder *finder);
Word *Finder_Word_FindUsing(Finder *finder, byte *name);
Word *Finder_FindQualifiedIDWord(Finder *finder, byte *token);
byte *Finder_GetTokenDefinitionAddress(Finder *finder, byte *token);
Word *Finder_FindToken_WithException(Finder *finder, byte *token);
Word *Finder_FindToken(Finder *finder, byte *token);
Word *_CfrTil_FindInAnyNamespace(byte *name);
Word *_CfrTil_Token_FindUsing(byte *token);
void CfrTil_Token_Find(void);
void CfrTil_Find(void);
void CfrTil_Postfix_Find(void);
/* core/tabCompletion.c */
Word *_TC_NextWord(Word *runWord);
Word *_TC_Map(Word *first, MapFunction mf);
void TabCompletion_Run(void);
TabCompletionInfo *TabCompletionInfo_New(int32 type);
byte *Word_GenerateFullNamespaceQualifiedName(Word *w);
Boolean _TabCompletionFunction(Word *word);
int32 _TC_FindPrevious_NamespaceQualifiedIdentifierStart(TabCompletionInfo *tci, CString s, int32 pos);
void _TC_StringInsert_AtCursor(TabCompletionInfo *tci, CString strToInsert);
byte *_TabCompletionInfo_GetAPreviousIdentifier(ReadLiner *rl, int32 start);
void TabCompletionInfo_Init(void);
/* core/colors.c */
void _OpenVmTil_ColorsInit(OpenVmTil *ovt);
void Console(void);
void _ShowRGB(int fr, int fg, int fb, int br, int bg, int bb);
void _String_ShowRGB(char *buf, int fr, int fg, int fb, int br, int bg, int bb);
void _ShowRgbColors(Colors *c);
void _String_ShowRgbColors(char *buf, Colors *c);
void Colors_Init6(Colors *c, int fr, int fg, int fb, int br, int bg, int bb);
void ShowColors(Colors *c);
void String_ShowColors(char *buf, Colors *c);
void _Colors_Init2(Colors *c, int fg, int bg);
void _CfrTil_SetRGBColor(Colors *c);
void _CfrTil_SetColors(Colors *c);
void Ovt_UserColors(void);
void Ovt_AlertColors(void);
void Ovt_DefaultColors(void);
void Ovt_DebugColors(void);
void Ovt_NoticeColors(void);
void CfrTil_SetDefaultColors(void);
void CfrTil_SetAlertColors(void);
void CfrTil_SetDebugColors(void);
void CfrTil_SetUserColors(void);
void CfrTil_SetNoticeColors(void);
void CfrTil_SetDefaultRGB(void);
void CfrTil_SetUserRGB(void);
void CfrTil_SetAlertRGB(void);
void CfrTil_SetDebugRGB(void);
void CfrTil_SetNoticeRGB(void);
/* core/string.c */
Boolean IsChar_Dot(byte character);
Boolean IsChar_Whitespace(byte character);
Boolean IsChar_DelimiterOrDot(byte character);
Boolean IsChar_ADotAndNotANonDelimiter(byte character);
void Mem_Clear(byte *buffer, int32 size);
int32 String_IsLastCharADot(byte *s, int32 pos);
int32 String_FirstCharOfToken_FromPosOfLastChar(byte *s, int32 pos);
int32 String_IsThereADotSeparatorBackFromPosToLastNonDelmiter(byte *s, int32 pos);
int32 String_LastCharOfLastToken_FromPos(byte *s, int32 pos);
Boolean String_IsReverseTokenQualifiedID(byte *s, int32 pos);
byte *__String_UnBox(byte *token);
byte *_String_UnBox(byte *token, int allocType);
char *_String_InsertColors(char *s, Colors *c);
char *_String_Insert_AtIndexWithColors(char *token, int ndx, Colors *c);
char *String_ReadLineToken_HighLight(char *token);
byte *_String_AppendConvertCharToBackSlash(byte *dst, byte c);
byte *_String_ConvertStringFromBackSlash(byte *dst, byte *src);
byte *_String_ConvertString_EscapeCharToSpace(byte *dst, byte *src);
byte *_String_ConvertStringToBackSlash(byte *dst, byte *src);
int32 stricmp(byte *str0, byte *str1);
int32 strnicmp(byte *str0, byte *str1, int32 n);
byte *strToLower(byte *dest, byte *str);
void String_RemoveEndWhitespaceAndAddNewline(byte *string);
byte *String_FilterForHistory(byte *istring);
void String_InsertCharacter(CString into, int32 position, byte character);
CString String_Wrap(CString in, CString s, CString pre, CString post);
void String_InsertDataIntoStringSlot(CString str, int32 startOfSlot, int32 endOfSlot, CString data);
byte *String_RemoveFinalNewline(byte *astring);
byte *String_N_New(byte *string, int32 n, int32 allocType);
byte *String_New(byte *string, int32 allocType);
int32 _StrTok(byte *str0, byte *buffer, byte *cset);
byte _String_NextNonDelimiterChar(byte *str0, byte *cset);
int32 _CfrTil_StrTok(byte *inBuffer);
byte *StringMacro_Run(byte *pb_namespaceName, byte *str);
byte *_CfrTil_StringMacros_Init(void);
byte *_CfrTil_StringMacros_Do(byte *buffer);
void _Buffer_Clear(Buffer *b);
byte *Buffer_Clear(Buffer *b);
Buffer *_Buffer_New(int32 size, int32 flag);
void Buffer_SetAsUnused(Buffer *b);
void Buffers_SetAsUnused(void);
Buffer *Buffer_New(int32 size);
Buffer *Buffer_NewLocked(int32 size);
Buffer *_Buffer_NewPermanent(int32 size);
byte *Buffer_New_pbyte(int32 size);
/* core/dobject.c */
DObject *_DObject_FindSlot_BottomUp(DObject *dobject, byte *name);
DObject *_DObject_SetSlot(DObject *dobject, byte *name, int32 value);
void DObject_SubObjectInit(DObject *dobject, Word *proto);
/* core/openVmTil.c */
int main(int argc, char *argv[ ]);
void _OpenVmTil(int argc, char *argv[ ]);
void _OpenVmTil_Run(OpenVmTil *ovt);
OpenVmTil *_OpenVmTil_Allocate(OpenVmTil *ovt);
void _OpenVmTil_Init(OpenVmTil *ovt, int resetHistory);
void Ovt_RunInit(OpenVmTil *ovt);
void OpenVmTil_Delete(OpenVmTil *ovt);
OpenVmTil *_OpenVmTil_New(OpenVmTil *ovt);
void OpenVmTil_Verbosity(void);
void Ovt_Optimize(void);
void Ovt_Inlining(void);
void Ovt_AutoVar(void);
void Ovt_AutoVarOff(void);
void Ovt_AutoVarOn(void);
void CfrTil_OptimizeOn(void);
void CfrTil_OptimizeOff(void);
void CfrTil_StringMacrosOn(void);
void CfrTil_StringMacrosOff(void);
void CfrTil_InlineOn(void);
void CfrTil_InlineOff(void);
void CfrTil_DebugOn(void);
void CfrTil_DebugOff(void);
void OpenVmTil_HistorySize(void);
void OpenVmTil_DataStackSize(void);
void OpenVmTil_CodeSize(void);
void OpenVmTil_SessionObjectsSize(void);
void OpenVmTil_CompilerTempObjectsSize(void);
void OpenVmTil_ObjectsSize(void);
void OpenVmTil_DictionarySize(void);
void OpenVmTil_Print_DataSizeofInfo(int flag);
/* core/object.c */
void CfrTil_Dot(void);
void Class_Object_Init(byte *object, Word *word, Namespace *ns);
/* core/property.c */
/* core/lists.c */
int32 List_Length(DLList *list);
DLNode *List_PrintValues(DLList *list);
DLNode *List_Search(DLList *list, int32 value);
DLNode *List_AddValue(DLList *list, int32 value);
DLNode *List_AddNamedValue(DLList *list, byte *name, int32 value);
/* core/linux.c */
void _DisplaySignal(int signal);
void Linux_SetupSignals(int startTimes);
void Linux_RestoreTerminalAttributes(void);
void Linux_SetInputMode(struct termios *savedTerminalAttributes);
void LinuxInit(struct termios *savedTerminalAttributes);
/* core/exception.c */
void _OpenVmTil_ShowExceptionInfo(void);
void _OpenVmTil_Pause(byte *prompt);
void OpenVmTil_Pause(void);
void _OpenVmTil_Throw(jmp_buf *sjb, byte *excptMessage, int32 restartCondition);
void OpenVmTil_Throw(byte *excptMessage, int32 restartCondition);
void _OpenVmTil_SigLongJmp_WithMsg(int32 restartCondition, byte *msg);
void OpenVmTil_SignalAction(int signal, siginfo_t *si, void *uc);
void CfrTil_Exception(int32 signal, int32 restartCondition);
void Error3(byte *format, byte *one, byte *two, int three);
void Error2(byte *format, byte *one, int two);
/* core/types.c */
/* core/lambdaCalculus.c */
ListObject *_LO_Eval(ListObject *l0, ListObject *locals, int32 applyFlag);
ListObject *_LO_EvalList(ListObject *lorig, ListObject *locals, int32 applyFlag);
ListObject *_LO_MacroPreprocess(ListObject *l0);
void _LO_CompileOrInterpret_One(ListObject *l0);
void _LO_CompileOrInterpret(ListObject *lfunction, ListObject *ldata);
ListObject *_LO_Apply(ListObject *l0, ListObject *lfunction, ListObject *ldata);
void LO_Substitute(ListObject *args, ListObject *vals);
block CompileLispBlock(ListObject *args, ListObject *body);
ListObject *_LO_MakeLambda(ListObject *l0);
ListObject *_LO_Define0(byte *sname, ListObject *nameNode, ListObject *locals);
ListObject *_LO_Define(ListObject *l0, ListObject *locals);
ListObject *_LO_Compile(ListObject *l0, ListObject *locals);
ListObject *LO_Define(ListObject *l0, ListObject *locals);
ListObject *LO_MakeLambda(ListObject *l0);
ListObject *_LO_Cons(ListObject *first, ListObject *second, uint64 allocType);
ListObject *LO_If(ListObject *l0, ListObject *locals);
ListObject *LO_Cond(ListObject *l0, ListObject *locals);
ListObject *LO_List(ListObject *l0);
ListObject *LO_Begin(ListObject *l0, ListObject *locals);
ListObject *LO_SpecialFunction(ListObject *l0, ListObject *locals);
ListObject *_LO_Macro(ListObject *l0, ListObject *locals);
ListObject *_LO_Set(ListObject *lfirst, Namespace *ns);
ListObject *LO_Set(ListObject *lfirst, ListObject *locals);
ListObject *LO_Let(ListObject *lfirst, ListObject *locals);
ListObject *LO_New_ParseRawStringOrLiteral(byte *token, int32 parseFlag);
void LO_Quote(void);
void LO_QuasiQuote(void);
void LO_UnQuoteSplicing(void);
void LO_UnQuote(void);
ListObject *_LO_Read(void);
ListObject *_LO_First(ListObject *l0);
ListObject *_LO_Last(ListObject *l0);
ListObject *_LO_Next(ListObject *l0);
Word *_LO_FindWord(byte *name, ListObject *locals);
ListObject *_LO_New(uint64 lType, uint64 ctype, Object *value, Word *word, int32 addFlag, byte *name, uint64 allocType);
void LO_SpliceAtTail(ListObject *lnew, ListObject *l0);
ListObject *_LO_AllocCopyOne(ListObject *l0, uint64 allocType);
void _LO_ListInit(ListObject *l0, uint64 allocType);
ListObject *_LO_ListNode_Copy(ListObject *l0, uint64 allocType);
ListObject *_LO_CopyOne(ListObject *l0, uint64 allocType);
ListObject *_LO_Copy(ListObject *l0, uint64 allocType);
Boolean LO_strcat(char *buffer, char *buffer2);
ListObject *LO_PrepareReturnObject(void);
void LO_BeginBlock(void);
void LO_EndBlock(void);
void LO_CheckEndBlock(void);
int32 LO_CheckBeginBlock(void);
ListObject *_LO_Apply_C_Rtl_ArgList(ListObject *l0, Word *word);
void LC_Interpret_MorphismWord(Word *word);
void LC_Interpret_AListObject(ListObject *l0);
void LC_CompileRun_ArgList(Word *word);
char *_LO_Print(ListObject *l0, char *buffer, int lambdaFlag, int printValueFlag);
char *_LO_PrintList(ListObject *l0, char *buffer, int lambdaFlag, int printValueFlag);
void LO_Print(ListObject *l0);
void _LO_EvalPrint(ListObject *l0, int32 *saveDsp);
void _LO_ReadEvalPrint_ListObject(ListObject *l0, int32 parenLevel);
void _LO_ReadEvalPrint0(int32 parenLevel);
void LO_ReadEvalPrint1(void);
void LO_ReadEvalPrint(void);
void LO_Repl(void);
void _LC_Init(LambdaCalculus *lc);
LambdaCalculus *LC_New(int32 initFlag);
/* core/locals.c */
void _Compiler_AddLocalFrame(Compiler *compiler);
void Compiler_SetLocalsFrameSize_AtItsCellOffset(Compiler *compiler);
void _Compiler_RemoveLocalFrame(Compiler *compiler);
void CfrTil_LocalsAndStackVariablesBegin(void);
void CfrTil_LocalVariablesBegin(void);
void CheckAddLocalFrame(Compiler *compiler);
void CheckCompileRemoveLocalFrame(Compiler *compiler);
/* core/debug.c */
byte *Debugger_GetStateString(Debugger *debugger);
void Debugger_CanWeStep(Debugger *debugger);
void Debugger_NextToken(Debugger *debugger);
void Debugger_CurrentToken(Debugger *debugger);
void Debugger_Parse(Debugger *debugger);
void _Debugger_FindAny(Debugger *debugger);
void Debugger_FindAny(Debugger *debugger);
void Debugger_FindUsing(Debugger *debugger);
void Debugger_Variables(Debugger *debugger);
void Debugger_InterpretTokenWriteCode(Debugger *debugger);
void Debugger_InterpretWord(Debugger *debugger);
void Debugger_Eval(Debugger *debugger);
void Debugger_SetupNextToken(Debugger *debugger);
void Debugger_WDis(Debugger *debugger);
int32 Debugger_Udis_GetInstructionSize(Debugger *debugger);
int32 Debugger_UdisOneInstruction(Debugger *debugger, byte *address, byte *prefix, byte *postfix);
ud_t *Debugger_UdisInit(Debugger *debugger);
void _Debugger_Disassemble(Debugger *debugger, byte *address, int32 number, int32 cflag);
void Debugger_DisassembleAccumulated(Debugger *debugger);
void Debugger_Menu(void);
void Debugger_Info(Debugger *debugger);
void Debugger_DoMenu(Debugger *debugger);
void Debugger_Stack(Debugger *debugger);
void _Debugger_Verbosity(Debugger *debugger);
void Debugger_Source(Debugger *debugger);
void Debugger_Registers(Debugger *debugger);
void Debugger_Continue(Debugger *debugger);
void Debugger_Quit(Debugger *debugger);
void Debugger_Abort(Debugger *debugger);
void Debugger_Stop(Debugger *debugger);
void Debugger_InterpretLine(void);
void Debugger_Escape(Debugger *debugger);
void Debugger_AutoMode(Debugger *debugger);
void Debugger_OptimizeToggle(Debugger *debugger);
void Debugger_CodePointerUpdate(Debugger *debugger);
void Debugger_Dump(Debugger *debugger);
void Debugger_Default(Debugger *debugger);
void Debugger_Stepping_Off(Debugger *debugger);
void Debugger_SetupStepping(Debugger *debugger, int32 sflag, int32 iflag);
void Debugger_Step(Debugger *debugger);
void _Debugger_DoNewline(Debugger *debugger);
void _Debugger_DoState(Debugger *debugger);
void _Debugger_InterpreterLoop(Debugger *debugger);
void _Debugger_PreSetup(Debugger *debugger, byte *token, Word *word);
void _Debugger_PostShow(Debugger *debugger, byte *token, Word *word);
/* primitives/strings.c */
void CfrTil_StrLen(void);
void CfrTil_StrCmp(void);
void CfrTil_StrICmp(void);
void CfrTil_StrCat(void);
void CfrTil_StrCpy(void);
/* primitives/bits.c */
void CfrTil_JMP(void);
void CfrTil_Compile_Jcc(void);
void CfrTil_Jcc_Label(void);
void CfrTil_JmpToHere(void);
void CfrTil_BitWise_NOT(void);
void CfrTil_BitWise_NEG(void);
void CfrTil_BitWise_OR(void);
void CfrTil_BitWise_OrEqual(void);
void CfrTil_BitWise_AND(void);
void CfrTil_BitWise_AndEqual(void);
void CfrTil_BitWise_XOR(void);
void CfrTil_BitWise_XorEqual(void);
void CfrTil_ShiftLeft(void);
void CfrTil_ShiftRight(void);
void CfrTil_ShiftLeft_Equal(void);
void CfrTil_ShiftRight_Equal(void);
/* primitives/maths.c */
void CfrTil_Plus(void);
void CfrTil_PlusPlusLValue(void);
void CfrTil_PlusPlusRValue(void);
void CfrTil_MinusMinusLValue(void);
void CfrTil_MinusMinusRValue(void);
void CfrTil_PlusEqual(void);
void CfrTil_MinusEqual(void);
void CfrTil_MultiplyEqual(void);
void CfrTil_DivideEqual(void);
void CfrTil_Minus(void);
void CfrTil_Multiply(void);
void CfrTil_Divide(void);
void CfrTil_Mod(void);
int32 _CFib(int n);
void CFib(void);
void CFactorial(void);
int32 _CFactorial(int32 n);
void CFactorial2(void);
void CFactorial3(void);
/* primitives/logics.c */
void CfrTil_LessThan(void);
void CfrTil_LessThanOrEqual(void);
void CfrTil_GreaterThan(void);
void CfrTil_GreaterThanOrEqual(void);
void CfrTil_Equals(void);
void CfrTil_DoesNotEqual(void);
void CfrTil_LogicalNot(void);
void CfrTil_LogicalAnd(void);
void CfrTil_LogicalOr(void);
void CfrTil_LogicalXor(void);
/* primitives/ios.c */
void CfrTil_Kbhit(void);
void _CfrTil_PrintString(byte *string);
void CfrTil_PrintString(void);
void CfrTil_NewLine(void);
void CfrTil_CarriageReturn(void);
void CfrTil_SPACE(void);
void CfrTil_TAB(void);
void _Print_Binary(byte *buffer, int32 n);
void Print_Binary(int32 n, int32 min, int32 max);
void PrintfInt(int32 n);
void CfrTil_PrintInt(void);
void CfrTil_Emit(void);
void CfrTil_Key(void);
void CfrTil_Prompt(void);
void _CfrTil_Ok(int32 promptFlag);
void CfrTil_Ok(void);
void CfrTil_LogOn(void);
void CfrTil_LogAppend(void);
void CfrTil_LogWrite(void);
void CfrTil_LogOff(void);
/* primitives/parsers.c */
void _CfrTil_Tick(void);
void CfrTil_Token(void);
void CfrTil_Tick(void);
void CfrTil_CPreProcessor(void);
/* primitives/interpreter.c */
void CfrTil_CommentToEndOfLine(void);
void CfrTil_ParenthesisComment(void);
void CfrTil_If_ConditionalInterpret(void);
void CfrTil_Else_ConditionalInterpret(void);
void CfrTil_Interpreter_IsDone(void);
void CfrTil_Interpreter_Done(void);
void CfrTil_Interpreter_Init(void);
void CfrTil_InterpretNextToken(void);
void CfrTil_Interpret(void);
void CfrTil_InterpretPromptedLine(void);
void CfrTil_InterpretString(void);
void CfrTil_Interpreter_EvalWord(void);
void CfrTil_InterpretALiteralToken(void);
void _CfrTil_Interpret(CfrTil *cfrTil);
void CfrTil_InterpreterRun(void);
void CfrTil_InterpreterStop(void);
/* primitives/namespaces.c */
void Do_Namespace_WithStatus_2(DLNode *node, MapFunction2 nsf, int32 nsStateFlag, int32 one, int32 two);
void _CfrTil_TreeMap(MapSymbolFunction2 msf2, int32 state, int32 two, int32 three);
void _CfrTil_NamespacesMap(MapSymbolFunction2 msf2, int32 state, int32 two, int32 three);
void _CfrTil_ForAllNamespaces(MapSymbolFunction2 msf2);
void Namespace_PrettyPrint(Namespace *ns, int32 indentFlag, int32 indentLevel);
void CfrTil_Namespace_New(void);
void CfrTil_Namespace_NotUsing(void);
void CfrTil_Namespace_UsingFirst(void);
void CfrTil_Namespace_UsingLast(void);
void CfrTil_PrintInNamespace(void);
void CfrTil_Namespaces(void);
void Symbol_SetNonTREED(Symbol *symbol, int32 one, int32 two);
void Symbol_Namespaces_PrintTraverse(Symbol *symbol, int32 containingNamespace, int32 indentLevel);
void Symbol_Namespaces_PrintTraverseWithWords(Symbol *symbol, int32 containingNamespace, int32 indentLevel);
void CfrTil_Namespaces_PrettyPrintTree(void);
void CfrTil_Namespaces_PrettyPrintTreeWithWords(void);
void _Namespace_Symbol_Print(Symbol *symbol, int32 printFlag, int32 str);
byte *_CfrTil_UsingToString(void);
void CfrTil_Using(void);
void _Namespace_RemoveFromUsingListAndClear(Namespace *ns);
void _CfrTil_RemoveNamespaceFromUsingListAndClear(byte *name);
/* primitives/systems.c */
void CfrTil_InitTime(void);
void CfrTil_TimerInit(void);
void CfrTil_Time(void);
void _ShellEscape(char *str);
void CfrTil_Throw(void);
void ShellEscape(void);
void CfrTil_Filename(void);
void CfrTil_LineNumber(void);
void CfrTil_LineCharacterNumber(void);
void _CfrTil_Version(int flag);
void CfrTil_Version(void);
void CfrTil_SystemState_Print(void);
void _SetEcho(int32 boolFlag);
void CfrTil_Echo(void);
void CfrTil_EchoOn(void);
void CfrTil_EchoOff(void);
void CfrTil_NoOp(void);
void CfrTil_Hex(void);
void CfrTil_Binary(void);
void CfrTil_Decimal(void);
void CfrTil_Dump(void);
void _CfrTil_PrintNReturnStack(int32 size);
void CfrTil_PrintNReturnStack(void);
void CfrTil_PrintReturnStack(void);
void CfrTil_PrintDataStack(void);
void CfrTil_CheckInitDataStack(void);
void CfrTil_DataStack_Size(void);
void CfrTil_Source_AddToHistory(void);
void CfrTil_Source_DontAddToHistory(void);
void CfrTil_AllocateNew(void);
void CfrTil_SystemBreak(void);
void CfrTil_Quit(void);
void CfrTil_Abort(void);
void CfrTil_DebugStop(void);
void CfrTil_ResetAll(void);
void CfrTil_Restart(void);
void CfrTil_RestartInit(void);
void CfrTil_FullRestart(void);
void CfrTil_WarmInit(void);
void CfrTil_Exit(void);
void CfrTil_ReturnFromFile(void);
void CfrTil_ShellEscape(void);
/* primitives/stack.c */
void CfrTil_Dsp(void);
void Drop(void);
void DropN(int n);
void CfrTil_Drop(void);
void CfrTil_DropN(void);
void _CfrTil_Push(int32 value);
void CfrTil_Dup(void);
void CfrTil_NDup(void);
void CfrTil_Pick(void);
void CfrTil_Swap(void);
/* primitives/compiler.c */
void CfrTil_Here(void);
void CompileCall(void);
void CompileACfrTilWord(void);
void CompileInt64(void);
void CompileInt32(void);
void CompileInt16(void);
void CompileByte(void);
void CompileN(void);
GotoInfo *_GotoInfo_Allocate(void);
void GotoInfo_Delete(DLNode *node);
GotoInfo *_CfrTil_CompileCallGotoPoint(uint64 type);
GotoInfo *GotoInfo_New(byte *lname);
void _CfrTil_Goto(byte *lname);
void CfrTil_Goto(void);
void CfrTil_Label(void);
void CfrTil_Return(void);
void CfrTil_Continue(void);
void CfrTil_Break(void);
void CfrTil_SetupRecursiveCall(void);
void CfrTil_Tail(void);
void CfrTil_Literal(void);
void CfrTil_Variable(void);
void CfrTil_LeftBracket(void);
void CfrTil_RightBracket(void);
void CfrTil_CompileMode(void);
/* primitives/words.c */
void CfrTil_Setup_WordEval(void);
void CfrTil_SourceCode_Init(void);
void CfrTil_Colon(void);
void CfrTil_SemiColon(void);
void AddressToWord(void);
void Word_Definition(void);
void Word_Xt(void);
void Word_DefinitionStore(void);
void Word_CodeStart(void);
void Word_CodeSize(void);
void Word_Run(void);
void Word_Eval(void);
void Word_Finish(void);
byte *_Word_Begin(void);
void Word_Add(void);
void CfrTil_Word_Create(void);
void CfrTil_Word(void);
void CfrTil_DlsymWord(void);
Word *_CfrTil_Alias(Word *word, byte *name);
void CfrTil_Alias(void);
void Do_TextMacro(void);
void Do_StringMacro(void);
void CfrTil_Eval_C_Rtl_ArgList(void);
void _CfrTil_Macro(int64 mtype, byte *function);
void CfrTil_TextMacro(void);
void CfrTil_StringMacro(void);
void CfrTil_EndRecursiveWord(void);
void CfrTil_BeginRecursiveWord(void);
void Word_Name(void);
void Word_Location(void);
void Word_Namespace(void);
void CfrTil_Keyword(void);
void CfrTil_Immediate(void);
void CfrTil_IsImmediate(void);
void CfrTil_Inline(void);
void CfrTil_Prefix(void);
void CfrTil_C_Prefix(void);
void CfrTil_C_Return(void);
void CfrTil_DebugWord(void);
void _PrintWord(DLNode *node, int32 *n);
void _Words(Symbol *symbol, MapFunction1 mf, int32 n);
void _PrintWords(Symbol *symbol, int32 *n);
int32 _CfrTil_PrintWords(int32 nsStatus);
void CfrTil_Words(void);
void _Variable_Print(Word *word);
void _PrintVariable(DLNode *node, int32 *n);
void _Variables(Symbol *symbol, MapFunction1 mf, int32 n);
void _PrintVariables(Symbol *symbol, int32 *n);
int32 _CfrTil_PrintVariables(int32 nsStatus);
void CfrTil_Variables(void);
void _CfrTil_NamespaceWords(void);
void CfrTil_NamespaceWords(void);
void CfrTil_AllWords(void);
/* primitives/file.c */
void CfrTil_IncludeFile(void);
int32 _File_Size(FILE *file);
int32 _File_Exists(byte *fname);
byte *_File_ReadToString_(FILE *file);
byte *_File_ReadToString(byte *name);
void File_Open(void);
void File_Close(void);
void File_Read(void);
void File_Write(void);
void File_Seek(void);
void File_Tell(void);
void File_Size(void);
void File_Exists(void);
/* primitives/debugger.c */
void Debugger_TableSetup(Debugger *debugger);
void _Debugger_State(Debugger *debugger);
void _Debugger_Copy(Debugger *debugger, Debugger *debugger0);
Debugger *Debugger_Copy(Debugger *debugger0, int32 type);
void Debugger_Delete(Debugger *debugger);
void Debugger_C_StackPrint(Debugger *debugger, int i);
void _Debugger_Init(Debugger *debugger, Word *word, byte *address);
Debugger *_Debugger_New(int32 type);
void _CfrTil_DebugInfo(void);
void CfrTil_DebugInfo(void);
void _CfrTil_Debug_AtAddress(byte *address);
void CfrTil_Debug_AtAddress(void);
void _CfrTil_DebugContinue(int autoFlagOff);
void CfrTil_DebugModeOn(void);
void CfrTil_DebugModeOff(void);
void CfrTil_LocalsShow(void);
void CfrTil_Debugger_Verbosity(void);
void CfrTil_DebugRuntimeBreakpoint(void);
void CfrTil_Debug(void);
/* primitives/memory.c */
void CfrTil_Peek(void);
void CfrTil_Poke(void);
void CfrTil_AtEqual(void);
void CfrTil_Store(void);
/* primitives/primitives.c */
/* primitives/contexts.c */
void CfrTil_Contex_New_RunWord(void);
/* primitives/disassembler.c */
void _CfrTil_Word_Disassemble(Word *word);
void CfrTil_Word_Disassemble(void);
void CfrTil_Disassemble(void);
/* primitives/syntax.c */
void CfrTil_InfixModeOff(void);
void CfrTil_InfixModeOn(void);
void CfrTil_PrefixModeOff(void);
void CfrTil_PrefixModeOn(void);
void CfrTil_C_Syntax_Off(void);
void CfrTil_C_Syntax_On(void);
void CfrTil_AddressOf(void);
void CfrTil_C_Semi(void);
void CfrTil_End_C_Block(void);
void CfrTil_TypedefStructBegin(void);
void CfrTil_TypedefStructEnd(void);
void CfrTil_C_Infix_Equal(void);
void _Type_Create(void);
void _CfrTil_Typedef(void);
Namespace *CfrTil_C_Class_New(void);
void CfrTil_If_C_Combinator(void);
void CfrTil_DoWhile_C_Combinator(void);
void CfrTil_For_C_Combinator(void);
void CfrTil_Loop_C_Combinator(void);
void CfrTil_While_C_Combinator(void);
